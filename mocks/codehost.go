// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	codehost "github.com/reviewpad/cookbook/codehost"

	mock "github.com/stretchr/testify/mock"
)

// Codehost is an autogenerated mock type for the Codehost type
type Codehost struct {
	mock.Mock
}

// CreateLabels provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *Codehost) CreateLabels(_a0 context.Context, _a1 string, _a2 string, _a3 []codehost.Label) error {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []codehost.Label) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetPRSizeData provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *Codehost) GetPRSizeData(_a0 context.Context, _a1 string, _a2 string, _a3 int) (*codehost.PRSizeData, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 *codehost.PRSizeData
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int) *codehost.PRSizeData); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codehost.PRSizeData)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, int) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetLabels provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4
func (_m *Codehost) SetLabels(_a0 context.Context, _a1 string, _a2 string, _a3 int, _a4 []string) error {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int, []string) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewCodehost interface {
	mock.TestingT
	Cleanup(func())
}

// NewCodehost creates a new instance of Codehost. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCodehost(t mockConstructorTestingTNewCodehost) *Codehost {
	mock := &Codehost{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
